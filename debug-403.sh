#!/bin/bash

echo "üîç DIAGNOSTIC 403 FORBIDDEN - K'rine Tattoo Filament"
echo "=================================================="

# 1. Test de base - APP_KEY
echo "1. V√©rification APP_KEY:"
if grep -q "APP_KEY=base64:" .env; then
    echo "‚úÖ APP_KEY pr√©sente"
else
    echo "‚ùå APP_KEY manquante - G√âN√âRATION:"
    php artisan key:generate --force
fi

# 2. Test de connexion DB
echo -e "\n2. Test connexion base de donn√©es:"
if php artisan tinker --execute="DB::connection()->getPdo(); echo 'DB OK';" 2>/dev/null | grep -q "DB OK"; then
    echo "‚úÖ Base de donn√©es connect√©e"
else
    echo "‚ùå Erreur de connexion DB"
    echo "SOLUTION IMM√âDIATE - Utiliser sessions fichier:"
    sed -i.bak 's/SESSION_DRIVER=database/SESSION_DRIVER=file/' .env
    echo "‚úÖ Sessions chang√©es vers 'file'"
fi

# 3. Test sessions
echo -e "\n3. Test sessions:"
SESSION_DRIVER=$(grep SESSION_DRIVER .env | cut -d'=' -f2)
echo "Driver actuel: $SESSION_DRIVER"

if [ "$SESSION_DRIVER" = "file" ]; then
    echo "‚úÖ Sessions en mode fichier (compatible)"
    # V√©rifier permissions storage
    if [ -w "storage/framework/sessions" ]; then
        echo "‚úÖ R√©pertoire sessions accessible"
    else
        echo "üîß Cr√©ation/permission du r√©pertoire sessions:"
        mkdir -p storage/framework/sessions
        chmod -R 775 storage
        echo "‚úÖ Permissions corrig√©es"
    fi
else
    echo "‚ö†Ô∏è Sessions en mode database - risque de 403"
fi

# 4. Test CSRF
echo -e "\n4. Configuration CSRF:"
echo "Cr√©ation d'un test de token CSRF..."
php artisan tinker --execute="
echo 'CSRF Token: ' . csrf_token();
echo 'Session ID: ' . session()->getId();
" 2>/dev/null || echo "‚ùå Impossible de g√©n√©rer CSRF token"

# 5. Nettoyage des caches
echo -e "\n5. Nettoyage des caches:"
php artisan config:clear
php artisan route:clear
php artisan view:clear
php artisan cache:clear
echo "‚úÖ Caches vid√©s"

# 6. Test route Filament
echo -e "\n6. V√©rification routes Filament:"
if php artisan route:list | grep -q "admin.*filament"; then
    echo "‚úÖ Routes Filament d√©tect√©es"
    php artisan route:list | grep filament | head -3
else
    echo "‚ùå Aucune route Filament trouv√©e"
fi

# 7. Test permissions
echo -e "\n7. V√©rification permissions:"
if [ -w "storage" ] && [ -w "bootstrap/cache" ]; then
    echo "‚úÖ Permissions OK"
else
    echo "üîß Correction des permissions:"
    chmod -R 775 storage bootstrap/cache
    echo "‚úÖ Permissions corrig√©es"
fi

# 8. Test URL et domaine
echo -e "\n8. Configuration URL:"
APP_URL=$(grep APP_URL .env | cut -d'=' -f2-)
echo "URL configur√©e: $APP_URL"
if [[ "$APP_URL" == *"votre-domaine"* ]]; then
    echo "‚ö†Ô∏è URL g√©n√©rique d√©tect√©e - √† modifier en production"
fi

# 9. Solutions imm√©diates pour le 403
echo -e "\nüîß SOLUTIONS IMM√âDIATES POUR LE 403:"
echo "=================================="

echo "A. D√©sactiver temporairement CSRF (D√âVELOPPEMENT UNIQUEMENT):"
echo "   Dans app/Http/Middleware/VerifyCsrfToken.php, ajouter '/admin/*' aux exceptions"

echo -e "\nB. Forcer sessions en mode fichier:"
echo "   SESSION_DRIVER=file dans .env"

echo -e "\nC. Vider compl√®tement le cache navigateur et cookies"

echo -e "\nD. Test direct avec curl:"
echo "   curl -I http://votre-domaine.com/admin"

# 10. Script de test en direct
echo -e "\n10. Test de la page admin:"
if command -v curl >/dev/null 2>&1; then
    echo "Test HTTP de la page admin..."
    RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/admin 2>/dev/null || echo "ERROR")
    if [ "$RESPONSE" = "200" ]; then
        echo "‚úÖ Page admin accessible (200)"
    elif [ "$RESPONSE" = "403" ]; then
        echo "‚ùå Erreur 403 confirm√©e"
    elif [ "$RESPONSE" = "500" ]; then
        echo "‚ùå Erreur 500 - probl√®me serveur"
    else
        echo "‚ö†Ô∏è R√©ponse: $RESPONSE"
    fi
else
    echo "‚ÑπÔ∏è curl non disponible pour test HTTP"
fi

echo -e "\nüìã R√âCAPITULATIF:"
echo "================"
echo "‚Ä¢ APP_KEY: $(grep APP_KEY .env | cut -d'=' -f2 | cut -c1-20)..."
echo "‚Ä¢ SESSION_DRIVER: $(grep SESSION_DRIVER .env | cut -d'=' -f2)"
echo "‚Ä¢ APP_DEBUG: $(grep APP_DEBUG .env | cut -d'=' -f2)"
echo "‚Ä¢ APP_ENV: $(grep APP_ENV .env | cut -d'=' -f2)"

echo -e "\nüéØ ACTIONS PRIORITAIRES:"
echo "1. V√©rifiez que les sessions fonctionnent (mode file recommand√©)"
echo "2. Videz compl√®tement le cache navigateur"
echo "3. Testez avec un navigateur priv√©"
echo "4. V√©rifiez les logs en temps r√©el: tail -f storage/logs/laravel.log"

echo -e "\n‚ú® Diagnostic termin√© !"