<?php

/**
 * Script d'installation Filament pour Laravel Forge - K'rine Tattoo
 * Installe la derni√®re version de Filament v3.x
 * Usage: php install-filament-forge.php
 */

echo "üöÄ Installation Filament pour Laravel Forge - K'rine Tattoo\n";
echo "=========================================================\n";
echo "Date: " . date('Y-m-d H:i:s') . "\n\n";

// Configuration
const SCRIPT_VERSION = '1.0.0';
const RED = "\033[0;31m";
const GREEN = "\033[0;32m";
const YELLOW = "\033[1;33m";
const BLUE = "\033[0;34m";
const RESET = "\033[0m";

function success($message) {
    echo GREEN . "‚úÖ $message" . RESET . "\n";
}

function warning($message) {
    echo YELLOW . "‚ö†Ô∏è  $message" . RESET . "\n";
}

function error($message) {
    echo RED . "‚ùå $message" . RESET . "\n";
}

function info($message) {
    echo BLUE . "‚ÑπÔ∏è  $message" . RESET . "\n";
}

function step($number, $title) {
    echo "\n" . BLUE . "üìã √âTAPE $number: $title" . RESET . "\n";
    echo str_repeat("=", strlen("√âTAPE $number: $title") + 4) . "\n";
}

function execCommand($command) {
    $output = [];
    $returnCode = 0;
    exec($command . " 2>&1", $output, $returnCode);
    
    return [
        'code' => $returnCode,
        'output' => implode("\n", $output)
    ];
}

// =========================================================================
// √âTAPE 1: CORRECTION 500 SERVER ERROR
// =========================================================================

step(1, "CORRECTION 500 SERVER ERROR");

// V√©rifier et g√©n√©rer APP_KEY si n√©cessaire
if (file_exists('.env')) {
    $envContent = file_get_contents('.env');
    if (!preg_match('/APP_KEY=base64:/', $envContent)) {
        info("APP_KEY manquante - g√©n√©ration...");
        execCommand("php artisan key:generate --force");
        success("APP_KEY g√©n√©r√©e");
    } else {
        success("APP_KEY pr√©sente");
    }
} else {
    error("Fichier .env non trouv√©");
    exit(1);
}

// Nettoyage des caches pour √©viter les erreurs 500
info("Nettoyage des caches...");
execCommand("rm -rf bootstrap/cache/* storage/framework/cache/* storage/framework/views/*");
execCommand("php artisan cache:clear");
execCommand("php artisan config:clear");
execCommand("php artisan route:clear");
execCommand("php artisan view:clear");
success("Caches nettoy√©s");

// V√©rifier les permissions
info("V√©rification des permissions...");
execCommand("chmod -R 775 storage bootstrap/cache");
success("Permissions corrig√©es");

// R√©g√©n√©ration autoload
info("R√©g√©n√©ration autoload...");
execCommand("composer dump-autoload");
success("Autoload r√©g√©n√©r√©");

// =========================================================================
// √âTAPE 2: V√âRIFICATIONS PR√âALABLES
// =========================================================================

step(2, "V√âRIFICATIONS PR√âALABLES");

// V√©rifier Laravel
$laravelCheck = execCommand("php artisan --version");
if ($laravelCheck['code'] !== 0) {
    error("Laravel non d√©tect√© - installation impossible");
    exit(1);
}
success("Laravel d√©tect√©: " . trim($laravelCheck['output']));

// V√©rifier Composer
$composerCheck = execCommand("composer --version");
if ($composerCheck['code'] !== 0) {
    error("Composer non disponible");
    exit(1);
}
success("Composer disponible");

// V√©rifier si Filament est d√©j√† install√©
$filamentCheck = execCommand("composer show | grep filament/filament");
if ($filamentCheck['code'] === 0) {
    warning("Filament d√©j√† install√© - r√©installation...");
}

// =========================================================================
// √âTAPE 3: INSTALLATION FILAMENT
// =========================================================================

step(3, "INSTALLATION FILAMENT V3");

info("Installation de Filament v3.x...");
$installResult = execCommand("composer require filament/filament:\"^3.0\" --no-interaction");

if ($installResult['code'] === 0) {
    success("Filament v3 install√© avec succ√®s");
} else {
    error("Erreur lors de l'installation de Filament:");
    echo $installResult['output'] . "\n";
    exit(1);
}

// =========================================================================
// √âTAPE 4: CONFIGURATION FILAMENT
// =========================================================================

step(4, "CONFIGURATION FILAMENT");

// Cr√©er le panneau admin
info("Cr√©ation du panneau admin...");
$panelResult = execCommand("php artisan filament:install --panels");

if ($panelResult['code'] === 0) {
    success("Panneau admin cr√©√©");
} else {
    warning("Probl√®me lors de la cr√©ation du panneau:");
    echo $panelResult['output'] . "\n";
}

// Publier les assets
info("Publication des assets...");
$assetsResult = execCommand("php artisan filament:assets");
if ($assetsResult['code'] === 0) {
    success("Assets publi√©s");
}

// =========================================================================
// √âTAPE 5: CR√âATION UTILISATEUR ADMIN
// =========================================================================

step(5, "CR√âATION UTILISATEUR ADMIN");

info("Cr√©ation d'un utilisateur admin...");
$userResult = execCommand("php artisan make:filament-user --name=\"Admin\" --email=\"admin@krinetattoo.com\" --password=\"password123\"");

if ($userResult['code'] === 0) {
    success("Utilisateur admin cr√©√©");
    info("Email: admin@krinetattoo.com");
    info("Mot de passe: password123");
    warning("Changez le mot de passe apr√®s la premi√®re connexion!");
} else {
    warning("Cr√©ation manuelle de l'utilisateur requise");
}

// =========================================================================
// √âTAPE 6: OPTIMISATIONS
// =========================================================================

step(6, "OPTIMISATIONS");

// Cache des configurations
info("Mise en cache des configurations...");
execCommand("php artisan config:cache");
success("Config cache cr√©√©");

// Cache des routes
info("Mise en cache des routes...");
execCommand("php artisan route:cache");
success("Route cache cr√©√©");

// Cache des vues
info("Mise en cache des vues...");
execCommand("php artisan view:cache");
success("View cache cr√©√©");

// Optimisation autoload
info("Optimisation autoload...");
execCommand("composer dump-autoload --optimize");
success("Autoload optimis√©");

// =========================================================================
// √âTAPE 7: PERMISSIONS
// =========================================================================

step(7, "PERMISSIONS");

info("Configuration des permissions...");
execCommand("chmod -R 775 storage bootstrap/cache");
execCommand("chmod -R 775 public");
success("Permissions configur√©es");

// =========================================================================
// √âTAPE 8: TEST FINAL
// =========================================================================

step(8, "TESTS FINAUX");

// Test Filament
$filamentTest = execCommand("php artisan about | grep -i filament");
if ($filamentTest['code'] === 0) {
    success("Filament op√©rationnel");
} else {
    warning("Test Filament - v√©rification manuelle requise");
}

// Test des routes Filament
$routeTest = execCommand("php artisan route:list | grep filament");
if ($routeTest['code'] === 0) {
    success("Routes Filament configur√©es");
} else {
    warning("V√©rification des routes requise");
}

// =========================================================================
// SCRIPT DE D√âPLOIEMENT FORGE
// =========================================================================

step(9, "CR√âATION SCRIPT FORGE");

$forgeScript = '#!/bin/bash

cd $FORGE_SITE_PATH

# Git pull
git pull origin $FORGE_SITE_BRANCH

# Nettoyage des caches pour √©viter 500 errors
rm -rf bootstrap/cache/* storage/framework/cache/* storage/framework/views/*

# Installation des d√©pendances
composer install --no-dev --optimize-autoloader

# D√©couverte des packages
php artisan package:discover --ansi

# V√©rification APP_KEY
if ! grep -q "APP_KEY=base64:" .env; then
    php artisan key:generate --force
fi

# Migrations
php artisan migrate --force

# Publication des assets Filament
php artisan filament:assets

# Nettoyage avant optimisations
php artisan cache:clear
php artisan config:clear
php artisan route:clear
php artisan view:clear

# Optimisations
php artisan config:cache
php artisan route:cache
php artisan view:cache

# Permissions
chmod -R 775 storage bootstrap/cache
chmod -R 775 public

echo "‚úÖ D√©ploiement Filament r√©ussi sans erreur 500"
';

file_put_contents('deploy-forge-filament.sh', $forgeScript);
chmod('deploy-forge-filament.sh', 0755);
success("Script Forge cr√©√©: deploy-forge-filament.sh");

// =========================================================================
// R√âSUM√â FINAL
// =========================================================================

echo "\n" . str_repeat("=", 60) . "\n";
echo GREEN . "üéâ INSTALLATION FILAMENT TERMIN√âE !" . RESET . "\n";
echo str_repeat("=", 60) . "\n";

echo "\nüìã R√âSUM√â DE L'INSTALLATION:\n";
echo "‚Ä¢ ‚úÖ Filament v3.x install√©\n";
echo "‚Ä¢ ‚úÖ Panneau admin configur√©\n";
echo "‚Ä¢ ‚úÖ Assets publi√©s\n";
echo "‚Ä¢ ‚úÖ Utilisateur admin cr√©√©\n";
echo "‚Ä¢ ‚úÖ Optimisations appliqu√©es\n";
echo "‚Ä¢ ‚úÖ Permissions configur√©es\n";

echo "\nüîë ACC√àS ADMIN:\n";
echo "‚Ä¢ URL: https://votre-domaine.com/admin\n";
echo "‚Ä¢ Email: admin@krinetattoo.com\n";
echo "‚Ä¢ Mot de passe: password123\n";

echo "\nüöÄ POUR FORGE:\n";
echo "‚Ä¢ Utilisez le script: deploy-forge-filament.sh\n";
echo "‚Ä¢ Ou copiez le contenu dans Deploy Script\n";

echo "\nüìù SCRIPT FORGE:\n";
echo str_repeat("-", 40) . "\n";
echo $forgeScript;
echo str_repeat("-", 40) . "\n";

echo "\n‚ú® Filament est maintenant pr√™t pour la production !\n";